import React, { useState, useEffect, useContext } from 'react';
import { VoiceSettingsContext } from '../App';
import '../styles/VoiceInput.css';

interface VoiceInputProps {
  onTextReceived: (text: string) => void;
  buttonLabel?: string;
  placeholder?: string;
}

const VoiceInput: React.FC<VoiceInputProps> = ({
  onTextReceived,
  buttonLabel = '–î–∏–∫—Ç—É–≤–∞—Ç–∏',
  placeholder = '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –ø–æ—á–∞—Ç–∏ –¥–∏–∫—Ç—É–≤–∞—Ç–∏...'
}) => {
  const [isListening, setIsListening] = useState<boolean>(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [supported, setSupported] = useState<boolean>(true);

  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const { voiceEnabled, voiceLanguage } = useContext(VoiceSettingsContext);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É API —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
  useEffect(() => {
    // @ts-ignore - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è SpeechRecognition
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
      setSupported(false);
      setErrorMessage('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏');
    }
  }, []);

  // –ï—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  if (!voiceEnabled) {
    return null;
  }

  const startListening = () => {
    setErrorMessage(null);

    // @ts-ignore - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è SpeechRecognition
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    
    if (!SpeechRecognition) {
      setErrorMessage('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏');
      return;
    }

    try {
      const recognition = new SpeechRecognition();
      recognition.lang = voiceLanguage; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      recognition.interimResults = false;
      recognition.maxAlternatives = 1;

      recognition.onstart = () => {
        setIsListening(true);
      };

      recognition.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript;
        onTextReceived(transcript);
      };

      recognition.onerror = (event: any) => {
        setErrorMessage(`–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: ${event.error}`);
        setIsListening(false);
      };

      recognition.onend = () => {
        setIsListening(false);
      };

      recognition.start();
    } catch (error) {
      setErrorMessage('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏');
      setIsListening(false);
    }
  };

  if (!supported) {
    return (
      <div className="voice-input-container">
        <div className="voice-input-error">
          {errorMessage}
        </div>
      </div>
    );
  }

  return (
    <div className="voice-input-container">
      <button
        type="button"
        className={`voice-input-button ${isListening ? 'listening' : ''}`}
        onClick={startListening}
        disabled={isListening}
        title={`–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É (${voiceLanguage})`}
      >
        <span className="voice-input-icon">üé§</span>
        {isListening ? '–°–ª—É—Ö–∞—é...' : buttonLabel}
      </button>
      
      {errorMessage && (
        <div className="voice-input-error">
          {errorMessage}
        </div>
      )}
      
      {isListening && (
        <div className="voice-input-status">
          –ì–æ–≤–æ—Ä—ñ—Ç—å –∑–∞—Ä–∞–∑...
        </div>
      )}
    </div>
  );
};

export default VoiceInput; 