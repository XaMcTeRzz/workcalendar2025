import React, { useState, useEffect } from 'react';
import { Task, TaskFormProps } from '../types';
import { createTask, updateTask } from '../services/api';
import VoiceInput from './VoiceInput';
import '../styles/TaskForm.css';

const TaskForm: React.FC<TaskFormProps> = ({ task, onClose, onSubmit }) => {
  const [formData, setFormData] = useState<Omit<Task, 'id'>>({
    title: '',
    description: '',
    date: new Date().toISOString().split('T')[0],
    time: '',
    completed: false,
    priority: undefined
  });
  
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (task) {
      setFormData({
        title: task.title,
        description: task.description || '',
        date: task.date,
        time: task.time || '',
        completed: task.completed,
        priority: task.priority
      });
    }
  }, [task]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: checked
    }));
  };
  
  const handleVoiceInput = (text: string, field: keyof Omit<Task, 'id'>) => {
    setFormData(prev => ({
      ...prev,
      [field]: text
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.title.trim()) {
      setError('–ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∞');
      return;
    }
    
    if (!formData.date) {
      setError('–î–∞—Ç–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∞');
      return;
    }
    
    try {
      setLoading(true);
      setError(null);
      
      if (task) {
        await updateTask({
          ...formData,
          id: task.id
        });
      } else {
        await createTask(formData);
      }
      
      onSubmit();
    } catch (err) {
      setError('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
      console.error('Error saving task:', err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="task-form-container">
      <div className="task-form-header">
        <h2>{task ? '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á—É' : '–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞–¥–∞—á—É'}</h2>
        <button type="button" className="close-button" onClick={onClose}>√ó</button>
      </div>
      
      {error && <div className="error-message">{error}</div>}
      
      <form onSubmit={handleSubmit} className="task-form">
        <div className="form-group">
          <label htmlFor="title">–ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ</label>
          <div className="input-voice-container">
            <input
              type="text"
              id="title"
              name="title"
              value={formData.title}
              onChange={handleInputChange}
              placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–¥–∞—á—ñ..."
              required
            />
            <VoiceInput 
              onTextReceived={(text) => handleVoiceInput(text, 'title')} 
              buttonLabel="üé§"
            />
          </div>
        </div>
        
        <div className="form-group">
          <label htmlFor="description">–û–ø–∏—Å (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)</label>
          <div className="input-voice-container">
            <textarea
              id="description"
              name="description"
              value={formData.description}
              onChange={handleInputChange}
              placeholder="–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –∑–∞–¥–∞—á—ñ..."
              rows={3}
            />
            <VoiceInput 
              onTextReceived={(text) => handleVoiceInput(text, 'description')} 
              buttonLabel="üé§"
            />
          </div>
        </div>
        
        <div className="form-row">
          <div className="form-group">
            <label htmlFor="date">–î–∞—Ç–∞</label>
            <input
              type="date"
              id="date"
              name="date"
              value={formData.date}
              onChange={handleInputChange}
              required
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="time">–ß–∞—Å (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)</label>
            <input
              type="time"
              id="time"
              name="time"
              value={formData.time || ''}
              onChange={handleInputChange}
            />
          </div>
        </div>
        
        <div className="form-group">
          <label htmlFor="priority">–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç</label>
          <select
            id="priority"
            name="priority"
            value={formData.priority || ''}
            onChange={handleInputChange}
          >
            <option value="">–û–±–µ—Ä—ñ—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç</option>
            <option value="HIGH">–í–∏—Å–æ–∫–∏–π</option>
            <option value="MEDIUM">–°–µ—Ä–µ–¥–Ω—ñ–π</option>
            <option value="LOW">–ù–∏–∑—å–∫–∏–π</option>
          </select>
        </div>
        
        {task && (
          <div className="form-check">
            <input
              type="checkbox"
              id="completed"
              name="completed"
              checked={formData.completed}
              onChange={handleCheckboxChange}
            />
            <label htmlFor="completed">–í–∏–∫–æ–Ω–∞–Ω–æ</label>
          </div>
        )}
        
        <div className="form-actions">
          <button type="button" onClick={onClose} className="btn btn-secondary" disabled={loading}>
            –°–∫–∞—Å—É–≤–∞—Ç–∏
          </button>
          <button type="submit" className="btn btn-primary" disabled={loading}>
            {loading ? '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...' : (task ? '–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏' : '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É')}
          </button>
        </div>
      </form>
    </div>
  );
};

export default TaskForm; 